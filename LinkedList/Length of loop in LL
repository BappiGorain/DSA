Given the head of a singly linked list, find the length of the loop in the linked list if it exists.
Return the length of the loop if it exists; otherwise, return 0.
A loop exists in a linked list if some node in the list can be reached again by continuously following the next pointer.
Internally, pos is used to denote the index (0-based) of the node from where the loop starts.
Note that pos is not passed as a parameter.


int findLengthOfLoop(ListNode *head)
    {
        ListNode *slow = head;
        ListNode *fast = head;
        int count = 0;

        while(fast and fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast)
            {
                slow = head;
                while(slow != fast)
                {
                    slow = slow->next;
                    fast = fast->next;
                }
                fast = fast->next;
                while(slow != fast)
                {
                    fast = fast->next;
                    count+=1;
                }
                return count+1;
            }
        }
        return 0;
    }
