Given an array of integers A[] of length N and an integer target.
You want to build an expression out of A by adding one of the symbols '+' and '-' before each integer in A and then concatenate all the integers.

For example, if arr = {2, 1}, you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that can be built, which evaluates to target and return your answer with modulo 109+7.


Example 1:

Input:
N = 5
A[] = {1, 1, 1, 1, 1}
target = 3
Output:
5
Explanation:
There are 5 ways to assign symbols to 
make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int solve(int i, vector<int>& arr, int sum,vector<vector<int>> &dp)
	{
	    if(i==0)
	    {
	        if(sum == 0 and arr[0] == 0) return 2;
	        if(sum == arr[0] || sum == 0) return 1;
	        return 0;
	    }
	    if(dp[i][sum] != -1) return dp[i][sum];
	    int notpick = solve(i-1,arr,sum,dp);
	    int pick = 0;
	    if(arr[i] <= sum)
	    {
	       pick = solve(i-1,arr,sum-arr[i],dp);
	    }
	    return dp[i][sum] = (pick+notpick);
	}
	
	int perfectSum(vector<int>& arr, int n, int sum)
	{
	    vector<vector<int>> dp(n, vector<int>(sum + 1, -1));
	    return solve(n-1,arr,sum,dp);
	}
    int countPartitions(int n, int d, vector<int>& arr)
    {
        int sum = 0;
        for(int i=0;i<n;i++) sum+=arr[i];
        if(sum-d<0) return 0;
        if((sum-d)%2==1) return 0;
        
        return perfectSum(arr, n, (sum-d) / 2);
    }  
  
    long long findTargetSumWays(int n, vector<int>& A, int target) {
        // Your code here
        return countPartitions(n,target,A);
    }
