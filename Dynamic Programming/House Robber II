You are given an array arr[] which represents houses arranged in a circle, where each house has a certain value.
A thief aims to maximize the total stolen value without robbing two adjacent houses. Since the houses are in a circle,
the first and last houses are also considered adjacent. Determine the maximum amount the thief can steal.


Examples:

Input: arr[] = [2, 3, 2]
Output: 3
Explanation: nums[0] and nums[2] can't be robbed because they are adjacent houses.
Input: arr[] = [1, 2, 3, 1]
Output: 4
Explanation: Maximum stolen value: nums[0] + nums[2] = 1 + 3 = 4


int solve(vector<int>& arr, int startIndex, int endIndex)
    {
        int prev1 = 0,prev2 = 0;
        for(int i=startIndex;i<=endIndex;i++)
        {
            int pick = prev2 + arr[i];
            int notPick = prev1 + 0;
            int curr = max(pick,notPick);
            prev2 = prev1;
            prev1 = curr;
        }
        return prev1;
    }
  
    int maxValue(vector<int>& arr) 
    {
        int n = arr.size();
        
        int case1 = solve(arr,0,n-2);
        int case2 = solve(arr,1,n-1);
        
        return max(case1,case2);
    }
