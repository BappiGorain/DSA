Given a set of N items, each with a weight and a value, represented by the array w and val respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Example 1:

Input: 
N = 2
W = 3
val = {1, 1}
wt = {2, 1}
Output: 
3
Explanation: 
1.Pick the 2nd element thrice.
2.Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1  = 3 which is <= 3.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

int solve(int i,int W, int wt[], int val[],vector<vector<int>> &dp) 
    {
        if(i==0)
        {
            return (W/wt[0]) * val[0];
        }
        if(dp[i][W] != -1) return dp[i][W];
        int notTake = solve(i-1,W,wt,val,dp);
        int take = INT_MIN;
        if(wt[i]<=W) take = solve(i,W-wt[i],wt,val,dp) + val[i];
        
        return dp[i][W] = max(take,notTake);
    }
    
    int knapSack(int N, int W, int val[], int wt[])
    {
        // code here
        vector<vector<int>> dp(N,vector<int>(W+1,-1));
        return solve(N-1,W,wt,val,dp);
    }
