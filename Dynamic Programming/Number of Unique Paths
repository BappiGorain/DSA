Given a A X B matrix with your initial position at the top-left cell, find the number of possible unique paths to reach
the bottom-right cell of the matrix from the initial position.

Note: Possible moves can be either down or right at any point in time, i.e., we can move to matrix[i+1][j] or matrix[i][j+1] from matrix[i][j].

Example 1:

Input:
A = 2, B = 2
Output: 2
Explanation: There are only two unique
paths to reach the end of the matrix of
size two from the starting cell of the
matrix.


private:
    int solve(int a, int b)
    {
        if( a == 0 or b == 0) return 1;
        int up = solve(a-1,b);
        int left = solve(a,b-1);
        return up + left;
    }
    public:
    int NumberOfPath(int a, int b)
    {
        return solve(a-1,b-1);
    }



private:
    int solve(int a, int b,vector<vector<int>> &dp)
    {
        if( a == 0 or b == 0) return 1;
        
        if(dp[a][b] != -1) return dp[a][b];
        
        int up = solve(a-1,b,dp);
        
        int left = solve(a,b-1,dp);
        
        return dp[a][b] = up + left;
    }
    
    
    public:
    int NumberOfPath(int a, int b)
    {
        vector<vector<int>> dp(a, vector<int>(b, -1));
        
        return solve(a-1,b-1,dp);
    }




int NumberOfPath(int a, int b)
    {
        vector<vector<int>> dp(a, vector<int>(b, -1));
        
        for(int i=0;i<a;i++)
        {
            for(int j=0;j<b;j++)
            {
                if(i==0 and j==0)
                {
                    dp[0][0] = 1;
                    continue;
                }
                int up = 0;
                int left = 0;
                if(i>0)
                    up = dp[i-1][j];
                if(j>0)
                    left = dp[i][j-1];
                
                dp[i][j] = up + left;
            }
        }
        return dp[a-1][b-1];
    }
