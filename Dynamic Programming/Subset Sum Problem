Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        ---------------------------- RECURSION ------------------------
                                                    -----------


        bool solve(int i,vector<int> arr,int sum)
            {
                if(i==0) return arr[i] == sum;
                if(sum == 0) return true;
                bool take = false;
                if(sum >= arr[i]) take = solve(i-1,arr,sum-arr[i]);
                bool notTake = solve(i-1,arr,sum);
                
                return take | notTake;
            }
            bool isSubsetSum(vector<int>arr, int sum)
            {
                return solve(arr.size()-1,arr,sum);
            }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                       ---------------------------- MEMORASATION ------------------------
                                                  -----------------


bool solve(int i,vector<int> arr,int sum,vector<vector<int>> &dp)
    {
        if(i==0) return arr[i] == sum;
        if(sum == 0) return true;
        if(dp[i][sum] != -1) return dp[i][sum];
        bool take = false;
        if(sum >= arr[i]) take = solve(i-1,arr,sum-arr[i],dp);
        bool notTake = solve(i-1,arr,sum,dp);
        
        return dp[i][sum] = take | notTake;
    }
    bool isSubsetSum(vector<int>arr, int sum)
    {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(sum+1,-1));
        return solve(n-1,arr,sum,dp);
    }
