Given a sorted array arr[]. Find the element that appears only once in the array. All other elements appear exactly twice. 

You solution must run in O(log n) time and O(1) space.

Examples :

Input: arr[] = [1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]
Output: 4
Explanation: 4 is the only element that appears exactly once.
Input: arr[] = [5]
Output: 5
Input: arr[] = [1, 2, 2, 3, 3]
Output: 1

int findOnce(vector<int>& arr) 
    {
        int n = arr.size();
        if(arr[0] != arr[1]) return arr[0];
        if(arr[n-1] != arr[n-2]) return arr[n-1];
        int low = 1;
        int high = n-2;
        while(low <= high)
        {
            int mid = (low + high) / 2;
            if(arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1])
            {
                return arr[mid];
            }
            if((mid%2==0 and arr[mid]==arr[mid+1]) or
                (mid%2==1 and arr[mid]==arr[mid-1]))
                {
                    low = mid + 1;
                }
            else
            {
                high = mid - 1;
            }
        }
        return 0;
    }
