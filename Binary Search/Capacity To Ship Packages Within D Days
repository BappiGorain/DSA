Given an array arr[] of n weights. Find the least weight capacity of a boat to ship all weights within d days.
The ith weight has a weight of arr[i]. Each day, we load the boat with weights given by arr[i].We may not load more weight than the maximum weight capacity of the ship.

Note: You have to load weights on the boat in the given order.

 

Example 1:

Input:
n = 3
arr[] = {1, 2, 1}
d = 2
Output:
3
Explanation:
We can ship the weights in 2 days
in the following way:-
Day 1- 1,2
Day 2- 1
Example 2:
Input:
n = 3
arr[] = {9, 8, 10}
d = 3
Output:
10
Explanation:
We can ship the weights in 3 days
in the following way:-
Day 1- 9
Day 2- 8
Day 3- 10




// User function Template for Java

class Solution {
    static boolean check(int []arr,int n, int d, int c)
    {
        int count = 1;
        int remCap = c;
        for(int i=0;i<n;i++)
        {
            if (arr[i] > c) return false;
            if(remCap>=arr[i])
            {
                remCap-=arr[i];
            }
            else
            {
                count++;
                remCap=c-arr[i]; 
            }
        }
        return count<=d;
    }
    static int leastWeightCapacity(int[] arr, int n, int d)
    {
        
        int max = arr[0];
        for(int e:arr) if(max<e) max=e;
        int low = max;
        int high = 0;
        for(int e:arr) high+=e;
        int ans = max;
        while(low<=high)
        {
            int mid = low+(high - low) / 2;
            boolean possible = check(arr,n,d,mid);
            if(possible) 
            {
                ans=mid;
                high = mid - 1;
            }
            else
            {
                low = mid + 1;
            }
        }
        return  ans;
    }
};
