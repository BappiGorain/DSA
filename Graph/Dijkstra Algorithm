Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a list of lists containing two integers
where the first integer of each list j denotes there is edge between i and j , second integers corresponds to the weight of that  edge .
You are given the source vertex S and You to Find the shortest distance of all the vertex's from the source vertex S.
You have to return a list of integers denoting shortest distance between each node and Source vertex S.
 
Note: The Graph doesn't contain any negative weight cycle.




vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;
        vector<int> dist(V,1e9);
        dist[S] = 0;
        pq.push({S,0});
        
        while(!pq.empty())
        {
            int node = pq.top().first;
            int dis = pq.top().second; 
            pq.pop();
            
            for(auto it: adj[node])
            {
                int edgeWeight = it[1];
                int adjNode = it[0];
                
                if(edgeWeight + dis < dist[adjNode])
                {
                    dist[adjNode] = edgeWeight + dis;
                    pq.push({adjNode,dist[adjNode]});
                }
            }
        }
        return dist;
    }
