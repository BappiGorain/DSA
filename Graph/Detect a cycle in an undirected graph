Given an undirected graph with V vertices labeled from 0 to V-1.
The graph is represented using an adjacency list where adj[i] lists all nodes connected to node. 
Determine if the graph contains any cycles.

Note: The graph does not contain any self-edges (edges where a vertex is connected to itself).

Input: V = 4, adj= [[1, 2], [0], [0, 3], [2]]
Output: False
Explanation: The graph does not contain any cycles.

Input: V = 6, adj= [[1, 3], [0, 2, 4], [1, 5], [0, 4], [1, 3, 5], [2, 4]]
Output: True
Explanation: The graph contains a cycle: 0 ->1 -> 2 -> 5 -> 4 -> 1.




bool cycle(int start,vector<int> adj[],vector<int> &vis)
    {
        queue<pair<int,int>> q;
        q.push({start,-1});
        vis[start] = 1;
        while(!q.empty())
        {
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();

            for(auto it: adj[node])
            {
                if(vis[it] == 0)
                {
                    q.push({it,node});   
                    vis[it] = 1;
                    
                }
                else if(it != parent)
                {
                    return true;
                }
            }
        }
        return false;
    }


    bool isCycle(int V, vector<int> adj[])
    {
        vector<int> vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(vis[i] == 0)
            {
                if(cycle(i,adj,vis) == true)
                {
                    return true;
                }
            }
        }
        return false;
    }
