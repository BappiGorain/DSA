Given a weighted and directed graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex S.
If a vertices can't be reach from the S then mark the distance as 10^8. Note: 
If the Graph contains a negative cycle then return an array consisting of only -1.



vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S)
    {
        vector<int> dist(V,1e8);
        dist[S] = 0;
        for(int i=0;i<V-1;i++)
        {
            for(auto it: edges)
            {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                
                if(dist[u] != 1e8 and dist[u] + wt < dist[v])
                {
                    dist[v] = dist[u] + wt;  
                }
            }
        }
        
        // Nth relaxation for cheaking negative edge cycle
        for(auto it: edges)
        {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            
            if(dist[u] != 1e8 and dist[u] + wt < dist[v])
            {
                return {-1}; 
            }
        }
        
        return dist;
    }
