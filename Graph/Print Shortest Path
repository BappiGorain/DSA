Given a weighted undirected graph having n vertices numbered from 1 to n and m edges describing there are edges,
where edges[i]=[ai,bi,wi], representing an edge from vertex ai to bi with weight wi.

Find the shortest path between the vertex 1 and the vertex n and if path does not exist then return a list consisting of only -1.
If there exists a path, then return a list whose first element is the weight of the path and the remaining elements represent the shortest path from vertex 1 to vertex n



vector<int> shortestPath(int n, int m, vector<vector<int>> &edges)
    {
        vector<int> parent(n + 1);
    vector<int> dist(n + 1, 1e9);
    vector<vector<pair<int, int>>> adj(n + 1);

    for (auto& edge : edges) {
        int u = edge[0];
        int v = edge[1];
        int w = edge[2];
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, 1});
    dist[1] = 0;
    parent[1] = 1;

    while (!pq.empty()) {
        int d = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        if (d > dist[node]) continue;  // Important optimization

        for (auto& edge : adj[node]) {
            int adjNode = edge.first;
            int weight = edge.second;

            if (dist[node] + weight < dist[adjNode]) {
                dist[adjNode] = dist[node] + weight;
                parent[adjNode] = node;
                pq.push({dist[adjNode], adjNode});
            }
        }
    }

    if (dist[n] == 1e9) return {-1};

    vector<int> path;
    int node = n;
    while (parent[node] != node) {
        path.push_back(node);
        node = parent[node];
    }
    path.push_back(1);
    reverse(path.begin(), path.end());

    vector<int> result;
    result.push_back(dist[n]);
    result.insert(result.end(), path.begin(), path.end());

    return result;
    }
