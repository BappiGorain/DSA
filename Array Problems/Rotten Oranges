Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the earliest time after which all the oranges are rotten. 
A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 
 

Example 1:

Input: grid = {{0,1,2},{0,1,2},{2,1,1}}
Output: 1
Explanation: The grid is-
0 1 2
0 1 2
2 1 1
Oranges at positions (0,2), (1,2), (2,0)
will rot oranges at (0,1), (1,1), (2,2) and 
(2,1) in unit time.
Example 2:

Input: grid = {{2,2,0,1}}
Output: -1
Explanation: The grid is-
2 2 0 1
Oranges at (0,0) and (0,1) can't rot orange at
(0,3).

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



int orangesRotting(vector<vector<int>>& grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        
        queue<pair<int,int>> q;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 2) 
                {
                    q.push({i,j});
                }
            }
        }
        
        int time = 0;
        int row[] = {-1,0,1,0};
        int col[] = {0,-1,0,1};
        
        while(!q.empty())
        {
            bool flag = false;
            int size = q.size();
            
            for(int i=0;i<size;i++)
            {
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                
                for(int j=0;j<4;j++)
                {
                    int nr = r + row[j];
                    int nc = c + col[j];
                    
                    if(nr>=0 and nr<n and nc>=0 and nc<m and grid[nr][nc] == 1)
                    {
                        q.push({nr,nc});
                        grid[nr][nc] = 2;
                        flag = true;
                        
                    }
                }
            } 
            if(flag == true)
            {
                time++;
            }
        }
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j] == 1) 
                {
                    return -1;
                }
            }
        }
        return time;
        
    }
