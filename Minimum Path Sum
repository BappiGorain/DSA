Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


int minimumCostPath(vector<vector<int>>& grid) 
    {
        int M = grid.size();
        int N = grid[0].size();

        vector<int> prev(N,0),curr(N,0);

        for(int i=0;i<M;i++)
        {
            for(int j=0;j<N;j++)
            {
                if(i==0 and j== 0)
                {
                    curr[0] =  grid[0][0];
                    continue;

                }
                int up = INT_MAX;
                if(i>0) up =  grid[i][j] + prev[j];
                int left = INT_MAX; 
                if(j>0) left =  grid[i][j] + curr[j-1];

                curr[j] = min(up,left);
            }
            prev = curr;
        }

        return prev[N-1];

    }
