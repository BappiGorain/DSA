Given a binary tree, find if it is height balanced or not.  A tree is height balanced if difference between heights of left and right subtrees is not more than one for all nodes of tree. 

Examples:

Input:
      1
    /
   2
    \
     3 
Output: 0
Explanation: The max difference in height of left subtree and right subtree is 2, which is greater than 1. Hence unbalanced

Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 1
Explanation: The max difference in height of left subtree and right subtree is 1. Hence balanced. 



int solve(Node *root, bool &ans)
    {
        if(root == NULL)
        {
            return 0;
        }
        int lh = solve(root->left,ans);
        int rh = solve(root->right,ans);
        if(abs(lh-rh)>1)
        {
            ans = false;
        }
        return 1 + max(lh,rh);
    }
    public:
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        bool ans = true;
        solve(root,ans);
        return ans;
    }
